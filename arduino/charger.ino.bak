//YWROBOT
//Compatible with the Arduino IDE 1.0
//Library version:1.1
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
#include <EEPROM.h>
LiquidCrystal_I2C lcd(0x27,20,2);  // set the LCD address to 0x27 for a 16 chars and 2 line display

#include <Filters.h>


#define PIN_AMPS_IN A0
#define PIN_AMPS_OUT A1
#define PIN_VOLTS_OUT A2
#define PIN_DUTY 9

#define MA_PER_BIT 73
#define MV_PER_BIT 30


struct Settings {
  unsigned int offset_amps_in;
  unsigned int offset_amps_out;
};
int ma_in, ma_out, mv_out;


FilterTwoPole flt_mv_out;                                       // create a two pole Lowpass filter
FilterTwoPole flt_ma_in;
FilterTwoPole flt_ma_out;

Settings settings = {
  0,0 
};

void saveSettings(){
  EEPROM.put(0, settings);
}

void loadSettings(){
  EEPROM.get(0, settings);
}


/* Configure digital pins 9 and 10 as 16-bit PWM outputs. */
void setupPWM16() {
    
    DDRB |= _BV(PB1) | _BV(PB2);        /* set pins as outputs */
    TCCR1A = _BV(COM1A1) | _BV(COM1B1)  /* non-inverting PWM */
        | _BV(WGM11);                   /* mode 14: fast PWM, TOP=ICR1 */
    TCCR1B = _BV(WGM13) | _BV(WGM12)
        | _BV(CS10);                    /* no prescaling */
    ICR1 = 0xffff;                      /* TOP counter value */
}

/* 16-bit version of analogWrite(). Works only on pins 9 and 10. */
void analogWrite16(uint8_t pin, uint16_t val)
{
    switch (pin) {
        case  9: OCR1A = val; break;
        case 10: OCR1B = val; break;
    }
}

unsigned int getADCAvg(byte pin, unsigned int n){
  unsigned long tmp=0;
  unsigned int i;
  for(i=0;i<n;i++){
    tmp = tmp + analogRead(pin); 
  }
  return tmp / n;
}

int getMA(byte pin){
  long tmp = getADCAvg(pin, 50);

  if(pin == PIN_AMPS_IN){
    tmp = tmp - settings.offset_amps_in;
    flt_ma_in.input(tmp);
    tmp = flt_ma_in.output();
  }
  if(pin == PIN_AMPS_OUT){
    tmp = tmp - settings.offset_amps_out;
    flt_ma_out.input(tmp);
    tmp = flt_ma_out.output();
  }


  
  tmp = tmp * MA_PER_BIT;
  if (tmp < 100) tmp = 0;
  return tmp;
}

int getMV(byte pin){
  long tmp = getADCAvg(pin, 50);
  flt_mv_out.input(tmp);
  //flt_mv_out_stats.input( flt_mv_out.output() );
  //Serial.println(tmp);
  tmp = flt_mv_out.output();
  tmp = tmp * MV_PER_BIT;
  if (tmp < 100) tmp = 0;
  return tmp;
}

void calibrateADC(){
  lcd.clear();
  lcd.print("Calibrating ADC Offsets");

  settings.offset_amps_in = getADCAvg(PIN_AMPS_IN, 10000);
  settings.offset_amps_out = getADCAvg(PIN_AMPS_OUT, 10000);
}


enum CHARGE_MODE { mode_ci, mode_cv, mode_float};

CHARGE_MODE charge_mode;

void setup(){
  Serial.begin(115200);

  pinMode(PIN_DUTY, OUTPUT);
  analogWrite(3, 0);

  setupPWM16();
  
  // initialize the lcd 
  lcd.init();                      
  lcd.backlight();

  // pin 12 is our 'calibrate' pin
  // if low on boot, perform calibration
  pinMode(12, INPUT);
  lcd.clear();
  if(!digitalRead(12)){
    // perform calibration
    lcd.print("Calibrating");
    calibrateADC();  
    delay(500);
    lcd.setCursor(0,1);
    lcd.print("Save settings");
    // save values
    saveSettings();
  }else{
    lcd.print("Restore settings");
    loadSettings();
  }
  //delay(500);
  lcd.clear();
  lcd.print("In: ");
  lcd.print(settings.offset_amps_in, DEC);
  lcd.setCursor(0,1);
  lcd.print("Out: ");
  lcd.print(settings.offset_amps_out, DEC);
  //delay(500);

  flt_mv_out.setAsFilter( LOWPASS_BUTTERWORTH, 5.0 ); // 100Hz cutoff freq
  flt_ma_in.setAsFilter( LOWPASS_BUTTERWORTH, 5.0 ); // 100Hz cutoff freq
  flt_ma_out.setAsFilter( LOWPASS_BUTTERWORTH, 5.0 ); // 100Hz cutoff freq
  //flt_mv_out_stats.setWindowSecs( 20.0/100.0 );

  // go to constant current mode
  charge_mode = mode_ci;
}

void readAnalogues(){
  ma_in = getMA(PIN_AMPS_IN);
  ma_out = getMA(PIN_AMPS_OUT);
  mv_out = getMV(PIN_VOLTS_OUT);
}


void disp(){
  
  lcd.setCursor(0,0);
  lcd.print("In: ");
  lcd.print((float)ma_in/1000.0,1);
  lcd.print("A      ");
  lcd.setCursor(0,1);
  lcd.print("Out: ");
  lcd.print((float)ma_out/1000.0,1);
  lcd.print("A ");
  lcd.print((float)mv_out/1000.0,1);
  lcd.print("V ");
}

unsigned long next_update = millis();
long mv_target = 3000;
long error = 0;
long kP = 20;
long kI = 1;

long integral = 0;
long duty = 0;

#define MV_SCALE_FACTOR 10



void controlVolts(){
  // basic P controller
  error = mv_target - mv_out;
  
  // scale it back into something sensibe
  error = error/MV_SCALE_FACTOR;

  // integrate
  integral += error;
  integral = integral > 65000 ? 65000 : integral;
  integral = integral < 0 ? 0 : integral;
  
  // apply gains
  duty = kP * error + kI * integral;

  // scale everything back
  //duty = duty;
  
  if(duty > 65535) duty = 65535;
  if(duty < 0) duty = 0;
  
  analogWrite16(PIN_DUTY, duty);
}

long ma_target = 500;
long amps_integral = 0;
void controlAmps(){
  // control mv_target to regulate ma_out
  long error = ma_target - ma_out;
  error = error / 10;
  //Serial.println(error);
  long kP = 15;
  long kI = 1;
  amps_integral += error;
  amps_integral = amps_integral < 0 ? 0 : amps_integral;
  amps_integral = amps_integral > 20000 ? 20000 : amps_integral;
  
  long tmp = error * kP + amps_integral * kI;
  if(tmp > 30000) tmp = 30000;
  mv_target = tmp;
  
}

void loop(){

  readAnalogues();

  // determine the charge mode and setpoint
  controlAmps();
  controlVolts();
  
  if(millis() > next_update){
    disp();
    next_update = millis() + 1000;
    Serial.print((float)mv_target/1000,2);
    Serial.print("V, ");
    Serial.print((float)mv_out/1000,2);
    Serial.print("V, ");
    Serial.print((float)ma_out/1000,2);
    Serial.print("A, ");
    Serial.print(error);
    Serial.print(", ");
    Serial.print(duty);
    Serial.print(", ");
    Serial.println(integral);
  }
}
